// Simple Database Service - Fixed Version with Supabase
class DatabaseService {
    constructor() {
        // Supabase configuration - Ger√ßek bilgileri buraya girin
        this.supabaseUrl = 'https://xgdxqnpsmkbnamtsjhmo.supabase.co';
        this.supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhnZHhxbnBzbWtibmFtdHNqaG1vIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg1NTEzNTIsImV4cCI6MjA3NDEyNzM1Mn0.P31ThhfVKP-hreXJOlezqnzYYQBygm4yituo7WyO2JM';
        this.supabase = null;
        this.isDemoMode = false; // NO DEMO MODE - SUPABASE ONLY
        this.isSupabaseReady = false;
        this.connectionError = null; // Store connection error
        
        console.log('üöÄ Database service starting (SUPABASE ONLY MODE)...');
        console.log('üåê Supabase URL:', this.supabaseUrl);
        console.log('üîë API Key length:', this.supabaseKey.length);
        
        // Clear all localStorage data immediately
        this.clearAllLocalStorage();
        
        // Initialize Supabase (required) - Don't throw errors in constructor
        console.log('‚ö° Supabase initialization ba≈ülatƒ±lƒ±yor...');
        this.initSupabase()
            .then(() => {
                console.log('üéâ Supabase initialization tamamlandƒ±!');
            })
            .catch(error => {
                console.error('‚ùå CRITICAL: Supabase initialization failed:', error);
                this.connectionError = error;
                this.isDemoMode = false; // Still no demo mode
                this.isSupabaseReady = false;
            });
    }

    clearAllLocalStorage() {
        console.log('üßπ T√ºm localStorage verileri temizleniyor...');
        const keysToRemove = [
            'mockUsers',
            'mockActivities', 
            'currentUser',
            'users',
            'activities',
            'userData',
            'userProfiles',
            'demoUsers'
        ];
        
        keysToRemove.forEach(key => {
            if (localStorage.getItem(key)) {
                localStorage.removeItem(key);
                console.log(`‚úÖ ${key} silindi`);
            }
        });
        
        console.log('‚úÖ LocalStorage tamamen temizlendi!');
    }
    
    async initSupabase() {
        try {
            console.log('üîå Supabase baƒülantƒ±sƒ± kuruluyor...');
            console.log('üåê URL test ediliyor:', this.supabaseUrl);
            
            // Skip health check - it might not be available or require auth
            // try {
            //     const healthCheck = await fetch(`${this.supabaseUrl}/health`, {
            //         method: 'GET',
            //         headers: { 'Content-Type': 'application/json' }
            //     });
            //     console.log('üè• Health check response:', healthCheck.status);
            // } catch (fetchError) {
            //     console.log('‚ö†Ô∏è Health check failed:', fetchError.message);
            //     // Continue anyway, health endpoint might not exist
            // }
            
            console.log('‚è≠Ô∏è Health check atlanƒ±yor, direkt client olu≈üturuluyor...');
            
            // Load Supabase library if not already loaded
            if (typeof window !== 'undefined' && !window.supabase) {
                console.log('üì¶ Supabase library y√ºkleniyor...');
                await this.loadSupabaseLibrary();
                // Wait a bit for library to initialize
                await new Promise(resolve => setTimeout(resolve, 1000));
                console.log('‚è≥ Library initialization tamamlandƒ±');
            } else {
                console.log('‚úÖ Supabase library zaten mevcut');
            }
            
            if (!window.supabase) {
                console.error('‚ùå window.supabase hala undefined!');
                throw new Error('Supabase library y√ºklenemedi - CDN problemi olabilir');
            }
            
            console.log('‚úÖ Supabase library confirmed loaded');
            console.log('üîó Supabase client olu≈üturuluyor...');
            
            // Create client with more permissive settings
            this.supabase = window.supabase.createClient(this.supabaseUrl, this.supabaseKey, {
                auth: {
                    persistSession: false,
                    autoRefreshToken: false,
                    detectSessionInUrl: false
                },
                global: {
                    headers: {
                        'apikey': this.supabaseKey,
                        'Authorization': `Bearer ${this.supabaseKey}`
                    }
                }
            });
            
            console.log('üß™ Supabase baƒülantƒ±sƒ± test ediliyor...');
            
            // Test with a simple query - use .maybeSingle() to avoid errors if no data
            const { data, error, status } = await this.supabase
                .from('users')
                .select('id, username')
                .limit(1);
            
            console.log('üìä Query response - Status:', status, 'Error:', error, 'Data:', data);
            
            if (error) {
                console.error('‚ùå Supabase test hatasƒ±:', error);
                console.error('Error details:', {
                    message: error.message,
                    code: error.code,
                    hint: error.hint,
                    details: error.details
                });
                
                if (error.message.includes('relation "users" does not exist') || 
                    error.code === 'PGRST116' || error.code === '42P01') {
                    console.log('üìã Users tablosu bulunamadƒ±');
                    console.log('üìÑ √á√∂z√ºm: supabase-setup.sql dosyasƒ±nƒ± Supabase Dashboard\'da √ßalƒ±≈ütƒ±rƒ±n');
                } else if (error.code === 'PGRST301') {
                    console.log('üîí RLS (Row Level Security) problemi');
                } else if (error.message.includes('JWT') || error.code === '401') {
                    console.log('üîë API Key ge√ßersiz veya s√ºresi dolmu≈ü');
                    console.log('üí° Yeni API Key al: Supabase Dashboard > Settings > API');
                } else {
                    console.log('üîÑ Bilinmeyen Supabase hatasƒ±');
                }
                
                this.isDemoMode = true;
                this.isSupabaseReady = false;
            } else {
                console.log('‚úÖ Supabase ba≈üarƒ±yla baƒülandƒ±!');
                console.log(`üìä ${data?.length || 0} kullanƒ±cƒ± bulundu`);
                this.isSupabaseReady = true;
                this.isDemoMode = false;
                
                // Dispatch ready event
                if (typeof window !== 'undefined') {
                    window.dispatchEvent(new CustomEvent('databaseReady', { 
                        detail: { 
                            database: this,
                            usersCount: data?.length || 0 
                        } 
                    }));
                    console.log('üì° Database ready event dispatched');
                }
            }
            
        } catch (error) {
            console.error('‚ùå Supabase baƒülantƒ± genel hatasƒ±:', error);
            console.error('Stack:', error.stack);
            this.isDemoMode = true;
            this.isSupabaseReady = false;
        }
    }
    
    async loadSupabaseLibrary() {
        return new Promise((resolve, reject) => {
            // Check if already loaded
            if (window.supabase) {
                console.log('üì¶ Supabase library already loaded');
                resolve();
                return;
            }
            
            console.log('üåê Supabase library CDN\'den y√ºkleniyor...');
            const script = document.createElement('script');
            script.src = 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2';
            script.async = true;
            script.onload = () => {
                console.log('‚úÖ Supabase library script loaded successfully');
                // Give it a moment to initialize
                setTimeout(() => {
                    if (window.supabase) {
                        console.log('üéâ window.supabase available!');
                        resolve();
                    } else {
                        console.error('‚ùå Script loaded but window.supabase still undefined');
                        reject(new Error('Supabase library script loaded but not available'));
                    }
                }, 500);
            };
            script.onerror = (error) => {
                console.error('‚ùå Supabase library CDN y√ºklenemedi:', error);
                reject(new Error('Failed to load Supabase library from CDN'));
            };
            
            // Add to document head
            document.head.appendChild(script);
            console.log('üìã Supabase script tag added to document head');
            
            // Timeout after 15 seconds
            setTimeout(() => {
                if (!window.supabase) {
                    console.error('‚è∞ Supabase library loading timeout!');
                    reject(new Error('Supabase library loading timeout (15s)'));
                }
            }, 15000);
        });
    }

    async createTablesIfNotExist() {
        try {
            console.log('üìã Otomatik tablo olu≈üturma deneniyor...');
            
            const createUserTableSQL = `
                CREATE TABLE IF NOT EXISTS users (
                    id BIGSERIAL PRIMARY KEY,
                    username VARCHAR(50) UNIQUE NOT NULL,
                    email VARCHAR(100) UNIQUE NOT NULL,
                    password VARCHAR(255) NOT NULL,
                    first_name VARCHAR(50),
                    last_name VARCHAR(50),
                    role VARCHAR(20) DEFAULT 'user' CHECK (role IN ('admin', 'user')),
                    status VARCHAR(20) DEFAULT 'suspended' CHECK (status IN ('active', 'inactive', 'suspended')),
                    gender VARCHAR(10) CHECK (gender IN ('male', 'female')),
                    phone VARCHAR(20),
                    bio TEXT,
                    profile_image TEXT,
                    secondary_image TEXT,
                    terms_accepted BOOLEAN DEFAULT FALSE,
                    terms_accepted_at TIMESTAMP WITH TIME ZONE,
                    last_login TIMESTAMP WITH TIME ZONE,
                    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
                );
                
                INSERT INTO users (username, email, password, first_name, last_name, role, gender, terms_accepted, terms_accepted_at)
                VALUES ('admin', 'admin@example.com', 'admin123', 'Admin', 'User', 'admin', 'male', true, NOW())
                ON CONFLICT (username) DO NOTHING;
            `;
            
            const { data, error } = await this.supabase.rpc('exec_sql', { 
                sql: createUserTableSQL 
            });
            
            if (error) {
                console.error('‚ùå Otomatik tablo olu≈üturulamadƒ±:', error);
            } else {
                console.log('‚úÖ Tablolar otomatik olu≈üturuldu');
            }
            
        } catch (error) {
            console.error('‚ùå Tablo olu≈üturma hatasƒ±:', error);
        }
    }
    
    async getAllUsers(includeStatusFilter = false, currentUserRole = null) {
        console.log('üìä Getting all users (SUPABASE ONLY)...', { includeStatusFilter, currentUserRole });
        
        if (this.connectionError) {
            console.error('‚ùå Supabase baƒülantƒ± hatasƒ±:', this.connectionError.message);
            // Return empty array instead of throwing error
            console.log('üîÑ Bo≈ü kullanƒ±cƒ± listesi d√∂nd√ºr√ºl√ºyor...');
            return [];
        }
        
        if (!this.supabase) {
            console.error('‚ùå Supabase client mevcut deƒüil!');
            // Wait a bit for initialization
            await new Promise(resolve => setTimeout(resolve, 2000));
            if (!this.supabase) {
                console.log('üîÑ Supabase hazƒ±r deƒüil, bo≈ü liste d√∂nd√ºr√ºl√ºyor...');
                return [];
            }
        }
        
        try {
            console.log('üîó Supabase\'den kullanƒ±cƒ±lar getiriliyor...');
            
            let query = this.supabase
                .from('users')
                .select('*')
                .order('created_at', { ascending: false });
            
            // Admin olmayan kullanƒ±cƒ±lar i√ßin askƒ±da olan profilleri gizle
            if (includeStatusFilter && currentUserRole !== 'admin') {
                console.log('üë§ Admin olmayan kullanƒ±cƒ± - askƒ±da olan profiller filtreleniyor...');
                query = query.in('status', ['active', 'inactive']);
            }
            
            const { data, error } = await query;
            
            if (error) {
                console.error('‚ùå Supabase getAllUsers hatasƒ±:', error);
                console.log('üîÑ Hata nedeniyle bo≈ü liste d√∂nd√ºr√ºl√ºyor...');
                this.isSupabaseReady = false;
                return [];
            }
            
            let filteredData = data || [];
            
            // Frontend'de ek filtreleme (backend filtrelemeyi desteklemeyen durumlar i√ßin)
            if (includeStatusFilter && currentUserRole !== 'admin') {
                filteredData = filteredData.filter(user => user.status !== 'suspended');
                console.log(`üîí ${(data?.length || 0) - filteredData.length} askƒ±da kullanƒ±cƒ± gizlendi`);
            }
            
            console.log(`‚úÖ ${filteredData.length} kullanƒ±cƒ± Supabase'den getirildi (toplam: ${data?.length || 0})`);
            this.isSupabaseReady = true;
            return filteredData;
            
        } catch (supabaseError) {
            console.error('‚ùå Supabase getAllUsers exception:', supabaseError);
            console.log('üîÑ Exception nedeniyle bo≈ü liste d√∂nd√ºr√ºl√ºyor...');
            this.isSupabaseReady = false;
            return [];
        }
    }
    
    // Sadece aktif kullanƒ±cƒ±larƒ± getir (askƒ±da ve pasif olanlarƒ± hari√ß tut)
    async getActiveUsers() {
        console.log('üë• Getting active users only...');
        
        try {
            const allUsers = await this.getAllUsers(true, 'user'); // Admin olmayan kullanƒ±cƒ± gibi davran
            return allUsers.filter(user => user.status === 'active');
        } catch (error) {
            console.error('‚ùå getActiveUsers error:', error);
            return [];
        }
    }
    
    // Visible users - admin g√∂rebilir hepsini, diƒüerleri sadece aktif ve pasif olanlarƒ±
    async getVisibleUsers(currentUserRole = 'user', currentUserStatus = 'active') {
        console.log('üëÅÔ∏è Getting visible users for role:', currentUserRole, 'status:', currentUserStatus);
        
        // SUSPENDED kullanƒ±cƒ±lar hi√ßbir profil g√∂remez
        if (currentUserStatus === 'suspended') {
            console.log('üö´ SUSPENDED kullanƒ±cƒ± - hi√ßbir profil g√∂sterilmiyor');
            return [];
        }
        
        try {
            return await this.getAllUsers(true, currentUserRole);
        } catch (error) {
            console.error('‚ùå getVisibleUsers error:', error);
            return [];
        }
    }
    
    getLocalStorageUsers() {
        console.log('üìÇ localStorage\'dan kullanƒ±cƒ±lar getiriliyor...');
        const users = localStorage.getItem('mockUsers');
        const parsed = users ? JSON.parse(users) : [];
        console.log('ÔøΩ localStorage users found:', parsed.length);
        
        // NO MOCK DATA CREATION - SUPABASE ONLY
        return [];
        
        return parsed;
    }
    
    async getUserById(userId) {
        const users = await this.getAllUsers();
        return users.find(u => u.id == userId);
    }
    
    async createUser(userData) {
        console.log('üìù Creating user:', userData.username);
        console.log('üîç Supabase durumu - Ready:', this.isSupabaseReady, 'Demo:', this.isDemoMode, 'Client:', !!this.supabase);
        console.log('üîó Supabase URL:', this.supabaseUrl);
        console.log('üóùÔ∏è API Key mevcut:', this.supabaseKey ? 'Evet (ilk 20: ' + this.supabaseKey.substring(0, 20) + '...)' : 'Hayƒ±r');
        
        // Force re-test Supabase connection before creating user
        if (this.supabase && this.isDemoMode) {
            console.log('üîÑ Supabase durumu yeniden test ediliyor...');
            try {
                const { data, error } = await this.supabase
                    .from('users')
                    .select('id')
                    .limit(1);
                
                if (!error) {
                    console.log('‚úÖ Supabase √ßalƒ±≈üƒ±yor! Demo modundan √ßƒ±kƒ±lƒ±yor...');
                    this.isSupabaseReady = true;
                    this.isDemoMode = false;
                } else {
                    console.log('‚ùå Supabase hala √ßalƒ±≈ümƒ±yor:', error.message);
                    console.log('üîç Error details:', {
                        code: error.code,
                        hint: error.hint,
                        details: error.details
                    });
                }
            } catch (testError) {
                console.log('‚ùå Supabase test hatasƒ±:', testError.message);
            }
        }
        
        // Recreate client with proper auth headers to fix 401 issue
        if (this.supabase && this.supabaseUrl && this.supabaseKey) {
            console.log('üîß Supabase client yeniden olu≈üturuluyor (401 fix)...');
            try {
                this.supabase = window.supabase.createClient(this.supabaseUrl, this.supabaseKey, {
                    auth: {
                        persistSession: false,
                        autoRefreshToken: false,
                        detectSessionInUrl: false
                    },
                    global: {
                        headers: {
                            'apikey': this.supabaseKey,
                            'Authorization': `Bearer ${this.supabaseKey}`,
                            'Content-Type': 'application/json',
                            'Prefer': 'return=representation'
                        }
                    },
                    db: {
                        schema: 'public'
                    }
                });
                console.log('‚úÖ Supabase client yenilendi');
            } catch (clientError) {
                console.error('‚ùå Client yenileme hatasƒ±:', clientError);
            }
        }
        
        // Try Supabase first if client exists
        if (this.supabase) {
            try {
                console.log('üîó Supabase ile kullanƒ±cƒ± eklemeye √ßalƒ±≈üƒ±lƒ±yor...');
                
                // Check if user exists in Supabase
                const { data: existingUsers, error: checkError } = await this.supabase
                    .from('users')
                    .select('id, username, email')
                    .or(`username.eq.${userData.username},email.eq.${userData.email}`);
                
                if (checkError) {
                    console.error('‚ùå Supabase existence check failed:', checkError.message, checkError.code);
                    console.error('‚ùå Error details:', {
                        hint: checkError.hint,
                        details: checkError.details
                    });
                    throw checkError;
                }
                
                if (existingUsers && existingUsers.length > 0) {
                    console.log('‚ö†Ô∏è User already exists in Supabase:', existingUsers[0]);
                    return { 
                        success: false, 
                        message: 'Bu kullanƒ±cƒ± adƒ± veya e-posta zaten kullanƒ±lƒ±yor! (Supabase)' 
                    };
                }
                
                console.log('‚úÖ User doesn\'t exist, creating in Supabase...');
                console.log('üîç userData.status before insert:', userData.status); // DEBUG
                
                // FORCE status to be suspended for new users
                const finalStatus = 'suspended'; // Zorla suspended yap
                console.log('üîí Final status set to:', finalStatus); // DEBUG
                
                // Create user in Supabase
                const { data, error } = await this.supabase
                    .from('users')
                    .insert([{
                        username: userData.username,
                        email: userData.email,
                        password: userData.password,
                        first_name: userData.first_name,
                        last_name: userData.last_name,
                        role: userData.role || 'user',
                        status: finalStatus, // Zorla suspended kullan
                        gender: userData.gender,
                        phone: userData.phone,
                        reference: userData.reference,
                        bio: userData.bio,
                        terms_accepted: userData.terms_accepted || false,
                        terms_accepted_at: userData.terms_accepted_at || new Date().toISOString(),
                        created_at: new Date().toISOString()
                        // removed updated_at - not in Supabase table schema
                    }])
                    .select()
                    .single();
                
                console.log('üîç Eklenen kullanƒ±cƒ± data:', data); // DEBUG: Eklenen kullanƒ±cƒ±nƒ±n status'√ºn√º kontrol et
                
                if (error) {
                    console.error('‚ùå Supabase insert error:', error.message, error.code, error.hint);
                    console.error('‚ùå Insert error details:', {
                        details: error.details,
                        status: error.status
                    });
                    throw error;
                }
                
                console.log('üéâ Kullanƒ±cƒ± Supabase\'e ba≈üarƒ±yla eklendi!', data);
                
                // Update status flags
                this.isSupabaseReady = true;
                this.isDemoMode = false;
                
                // No localStorage backup - Supabase only
                
                return { success: true, user: data, source: 'supabase' };
                
            } catch (error) {
                console.error('‚ùå Supabase createUser exception:', error.message);
                console.log('üîÑ Falling back to localStorage...');
                
                // If it's RLS error, inform user
                if (error.message && error.message.includes('row-level security')) {
                    return {
                        success: false,
                        message: 'Supabase RLS sorunu! Config sayfasƒ±ndan RLS d√ºzeltme kodunu √ßalƒ±≈ütƒ±rƒ±n.'
                    };
                }
                
                // If it's 401 error, inform user about API key issue
                if (error.code === '401' || error.message.includes('401') || error.message.includes('Unauthorized')) {
                    return {
                        success: false,
                        message: 'Supabase API Key hatasƒ±! Config sayfasƒ±ndan yeni API Key giriniz.'
                    };
                }
            }
        } else {
            throw new Error('Veritabanƒ± baƒülantƒ±sƒ± kurulamadƒ±. L√ºtfen internet baƒülantƒ±nƒ±zƒ± kontrol edin ve sayfayƒ± yenileyin.');
        }
    }
    
    async updateUser(userId, updates) {
        if (!this.supabase) {
            throw new Error('Veritabanƒ± baƒülantƒ±sƒ± hazƒ±r deƒüil. L√ºtfen bekleyip tekrar deneyin.');
        }
        
        try {
            console.log('üîÑ Kullanƒ±cƒ± g√ºncelleniyor (Supabase):', userId);
            
            const { data, error } = await this.supabase
                .from('users')
                .update(updates)
                .eq('id', userId)
                .select()
                .single();
            
            if (error) {
                console.error('‚ùå Supabase update hatasƒ±:', error);
                throw error;
            }
            
            console.log('‚úÖ Kullanƒ±cƒ± g√ºncellendi:', data);
            return { success: true, user: data };
            
        } catch (error) {
            console.error('‚ùå updateUser hatasƒ±:', error);
            return { success: false, error: error.message };
        }
    }
    
    async deleteUser(userId) {
        if (!this.supabase) {
            throw new Error('Veritabanƒ± baƒülantƒ±sƒ± hazƒ±r deƒüil. L√ºtfen bekleyip tekrar deneyin.');
        }
        
        try {
            console.log('üóëÔ∏è Kullanƒ±cƒ± siliniyor (Supabase):', userId);
            
            const { error } = await this.supabase
                .from('users')
                .delete()
                .eq('id', userId);
            
            if (error) {
                console.error('‚ùå Supabase delete hatasƒ±:', error);
                throw error;
            }
            
            console.log('‚úÖ Kullanƒ±cƒ± silindi');
            return { success: true };
            
        } catch (error) {
            console.error('‚ùå deleteUser hatasƒ±:', error);
            return { success: false, error: error.message };
        }
    }
    
    async logActivity(userId, action, description) {
        console.log('üìù logActivity √ßaƒürƒ±ldƒ±:', { userId, action, description });
        
        // Only use Supabase for activities - no localStorage fallback
        if (!this.supabase) {
            console.warn('‚ö†Ô∏è Supabase client yok, activity loglanamadƒ±');
            return null;
        }
        
        try {
            // Test activities table first
            const { data: testData, error: testError } = await this.supabase
                .from('activities')
                .select('id')
                .limit(1);

            if (testError && testError.code === 'PGRST116') {
                console.error('‚ùå Activities tablosu bulunamadƒ±, activity loglanamadƒ±');
                console.log('üí° √á√∂z√ºm: supabase-setup.sql dosyasƒ±nƒ± √ßalƒ±≈ütƒ±rƒ±n');
                return null;
            }

            const newActivity = {
                user_id: userId,
                action: action,
                description: description,
                ip_address: '127.0.0.1',
                created_at: new Date().toISOString()
            };
            
            console.log('üìù Activity Supabase\'e ekleniyor:', newActivity);
            
            const { data, error } = await this.supabase
                .from('activities')
                .insert([newActivity])
                .select()
                .single();
            
            if (error) {
                console.error('‚ùå Activity log hatasƒ±:', error);
                return null;
            }
            
            console.log('‚úÖ Activity logged:', data);
            return data;
            
        } catch (error) {
            console.error('‚ùå logActivity hatasƒ±:', error);
            return null;
        }
    }
    
    async getActivities(limit = 50) {
        console.log('üìã getActivities √ßaƒürƒ±ldƒ± - Supabase durumu:', {
            hasSupabase: !!this.supabase,
            isReady: this.isSupabaseReady,
            isDemoMode: this.isDemoMode,
            connectionError: this.connectionError?.message
        });

        if (!this.supabase) {
            console.warn('‚ö†Ô∏è Supabase client yok, bo≈ü liste d√∂nd√ºr√ºl√ºyor...');
            return [];
        }

        // Test Supabase connection and activities table
        try {
            console.log('üß™ Activities tablosu varlƒ±ƒüƒ± test ediliyor...');
            const { data: testData, error: testError } = await this.supabase
                .from('activities')
                .select('id')
                .limit(1);

            if (testError) {
                console.error('‚ùå Activities tablosu test hatasƒ±:', testError);
                if (testError.message.includes('relation "activities" does not exist') || 
                    testError.code === 'PGRST116') {
                    console.log('üìã Activities tablosu bulunamadƒ±!');
                    console.log('üí° √á√∂z√ºm: supabase-setup.sql dosyasƒ±nƒ± Supabase Dashboard\'da √ßalƒ±≈ütƒ±rƒ±n');
                }
                return [];
            }

            console.log('‚úÖ Activities tablosu mevcut, veriler getiriliyor...');
        } catch (testException) {
            console.error('‚ùå Activities tablo testi exception:', testException);
            return [];
        }
        
        try {
            console.log('üìã Activities getiriliyor (Supabase)...');
            
            const { data, error } = await this.supabase
                .from('activities')
                .select(`
                    *,
                    users!activities_user_id_fkey (
                        first_name,
                        last_name,
                        username
                    )
                `)
                .order('created_at', { ascending: false })
                .limit(limit);
            
            if (error) {
                console.error('‚ùå Activities query hatasƒ±:', error);
                return [];
            }
            
            // Format data for compatibility
            const activitiesWithUsers = data.map(activity => ({
                ...activity,
                first_name: activity.users?.first_name || 'Unknown',
                last_name: activity.users?.last_name || 'User',
                username: activity.users?.username || 'unknown'
            }));
            
            console.log('üìã Activities bulundu:', activitiesWithUsers.length);
            return activitiesWithUsers;
            
        } catch (error) {
            console.error('‚ùå getActivities hatasƒ±:', error);
            return [];
        }
    }
    
    getStatusMessage() {
        // Always return success status - no annoying connection messages
        return {
            type: 'success',
            icon: '‚úÖ',
            title: 'Hayƒ±rlƒ± g√ºnler dileriz',
            message: 'Bismillahirrahmanirrahim',
            action: null
        };
    }
}

// Global database instance
console.log('üì¶ DatabaseService instance olu≈üturuluyor...');
const db = new DatabaseService();

// Export for use in other files
window.DatabaseService = DatabaseService;
window.db = db;

// Add event listener for when database is ready
window.onDatabaseReady = function(callback) {
    if (db.isSupabaseReady && db.supabase) {
        callback();
    } else {
        // Check every 500ms until database is ready
        const checkInterval = setInterval(() => {
            if (db.isSupabaseReady && db.supabase) {
                clearInterval(checkInterval);
                callback();
            }
        }, 500);
        
        // Timeout after 30 seconds
        setTimeout(() => {
            clearInterval(checkInterval);
            console.error('‚ùå Database ready timeout!');
        }, 30000);
    }
};

console.log('üöÄ Database service initialized - Global instance ready');